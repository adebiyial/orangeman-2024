---
import { getPathnames, slugify } from "../misc/fns";
import Hyperlink from "./Hyperlink.astro";

interface Props {
  toc?: Array<{
    title: string;
    href?: string;
    depth?: number;
  }>;
}

const { toc } = Astro.props;
const pathnames = getPathnames(Astro.url.pathname);
const prevPath = pathnames[pathnames.length - 2];
---

<script>
  const TOP_OFFSET = 144;
  const toc = document.querySelector(".toc");
  let currentIndex = 0;
  const essay = document.getElementById("essay");
  const headersAnchors = essay?.querySelectorAll(":is(h2, h3)");

  function updateActiveLink() {
    const pageHeight = document.body.scrollHeight;
    const scrollPosition = window.scrollY + window.innerHeight;

    if (scrollPosition >= 0 && pageHeight - scrollPosition <= TOP_OFFSET) {
      // Scrolled to bottom of page.
      if (headersAnchors) {
        currentIndex = headersAnchors?.length - 1;
      }
    }

    let index = -1;
    if (headersAnchors?.length) {
      while (index < headersAnchors?.length - 1) {
        const headerAnchor = headersAnchors[index + 1];
        const { top } = headerAnchor.getBoundingClientRect();

        if (top >= TOP_OFFSET) {
          break;
        }
        index += 1;
      }
    }

    currentIndex = Math.max(index, 0);

    if (toc) {
      const selectedIndex = Math.min(currentIndex, toc?.childElementCount - 1);

      Array.from(toc.children).forEach((child, i) => {
        child.setAttribute(
          "data-selected",
          i === selectedIndex ? "true" : "false"
        );
      });
    }
  }

  function handleScroll() {
    setTimeout(() => {
      updateActiveLink();
    }, 100);
  }

  document.addEventListener("scroll", handleScroll);

  updateActiveLink();
</script>

<aside data-grid>
  {
    toc && (
      <>
        <span>â†“ Table of content</span>
        <nav>
          <ul class="toc">
            <li>
              <Hyperlink href={`${Astro.url.pathname}#`} nounderline>
                <p data-subtitle>Overview</p>
              </Hyperlink>
            </li>
            {toc.map(({ href, title, depth }) => (
              <li data-depth={depth}>
                <Hyperlink href={`#${slugify(href || title)}`} nounderline>
                  <p data-subtitle>{title}</p>
                </Hyperlink>
              </li>
            ))}
          </ul>
        </nav>
      </>
    )
  }
  <Hyperlink
    href={prevPath.toLowerCase() === "index" ? "/" : `/${prevPath}`}
    nounderline
  >
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="16"
      height="16"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
      class="lucide lucide-corner-up-left"
    >
      <>
        <polyline points="9 14 4 9 9 4"></polyline>
        <path d="M20 20v-7a4 4 0 0 0-4-4H4"></path>
      </>
    </svg>
    <span>{prevPath}</span>
  </Hyperlink>
</aside>

<style>
  aside {
    position: fixed;
    top: calc(var(--page-top) + 3px);
    left: var(--body-margin-left);
    z-index: 1;
    gap: var(--gap-3x);
    width: 300px;

    @media screen and (max-width: 1340px) {
      display: none;
    }

    > span,
    > a {
      color: var(--light-gray);
      font-weight: 600;
    }

    > a {
      display: flex;
      gap: var(--gap-s);
      white-space: nowrap;
      align-items: center;
    }
  }

  nav {
    max-height: calc(100vh - var(--page-top) * 2);
    overflow: scroll;
    border-inline-start: 1px solid var(--green-fade);
    padding-inline-start: var(--gap);
    margin-inline-start: calc(var(--gap) / 2);
    padding-block-end: var(--gap);
    width: fit-content;

    .toc {
      list-style: none;
      padding: 0;
      margin: 0;

      :is([data-selected="true"]) a [data-subtitle] {
        color: var(--orange);
        font-weight: 600;
      }

      a {
        width: 100%;

        &:hover [data-subtitle] {
          color: var(--default-fg);
        }
      }

      [data-subtitle] {
        padding: var(--gap-s) 0;
      }
    }

    [data-depth="3"] {
      padding-inline-start: var(--gap-2x);
    }
  }
</style>
